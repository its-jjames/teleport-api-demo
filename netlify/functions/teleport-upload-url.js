/*import { getTeleportToken, apiBase } from "./_teleportAuth.js";export default async (req) => {    try {        if (req.method !== "POST") {            return new Response("method not allowed", { status: 405 });        }        const { eid, part_no, bytesize } = await req.json();        if (!eid || !part_no || typeof bytesize !== "number") {            return new Response("missing required fields", { status: 400 });        }        const token = await getTeleportToken();        const r = await fetch(`${apiBase()}/api/v1/captures/${encodeURIComponent(eid)}/create-upload-url/${encodeURIComponent(part_no)}`, {            method: "POST",            headers: {                "authorization": `Bearer ${token}`,                "content-type": "application/json"            },            body: JSON.stringify({ eid, bytesize })        });        const text = await r.text();        if (!r.ok) return new Response(text, { status: r.status });        return new Response(text, { status: 200, headers: { "content-type": "application/json" } });    } catch (e) {        return new Response(e.message || "server error", { status: 500 });    }};*//*// netlify/functions/teleport-upload-url.jsexports.handler = async function(event, context) {    console.log("Upload URL called with:", event.body);    // Parse the request to get part number    const data = JSON.parse(event.body);    const partNo = data.part_no || 1;    // Generate a URL that points to another Netlify function    const host = event.headers.host || 'localhost:8888';    const protocol = host.includes('localhost') ? 'http' : 'https';    const upload_url = `${protocol}://${host}/.netlify/functions/mock-s3-upload?part=${partNo}`;    return {        statusCode: 200,        headers: {            'Content-Type': 'application/json'        },        body: JSON.stringify({ upload_url })    };};*/exports.handler = async function(event, context) {    if (event.httpMethod !== 'POST') {        return { statusCode: 405, body: 'Method Not Allowed' };    }    try {        const API_BASE = "https://teleport.varjo.com";        const { eid, part_no, access_token, bytesize } = JSON.parse(event.body);        const response = await fetch(            `${API_BASE}/api/v1/captures/${eid}/create-upload-url/${part_no}`,            {                method: "POST",                headers: {                    Authorization: `Bearer ${access_token}`,                    "Content-Type": "application/json",                },                body: JSON.stringify({ eid, bytesize }),            }        );        if (!response.ok) {            const errorText = await response.text();            return {                statusCode: response.status,                body: JSON.stringify({                    error: `Failed to get upload URL for part ${part_no}`,                    details: errorText                })            };        }        const data = await response.json();        return {            statusCode: 200,            body: JSON.stringify(data)        };    } catch (error) {        console.error("Create upload URL error:", error);        return {            statusCode: 500,            body: JSON.stringify({ error: error.message || "Internal server error" })        };    }};